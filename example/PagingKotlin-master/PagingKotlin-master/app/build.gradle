apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

apply plugin: 'dagger.hilt.android.plugin'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"
    defaultConfig {
        applicationId "com.app.galleryimage"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes
    {
        debug
        {
            buildConfigField "String", 'BASE_URL', "\"https://api.flickr.com/services/\""
            buildConfigField "String", 'API_Key', "\"9a95c68a9c6ec61104cd3967dcbb8bd3\""
        }
        release
        {
            buildConfigField "String", 'BASE_URL', "\"https://api.flickr.com/services/\""
            buildConfigField "String", 'API_Key', "\"9a95c68a9c6ec61104cd3967dcbb8bd3\""

            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    //Android app bundle settings for density,abi and Language.
    bundle {
        density {
            // Different APKs are generated for devices with different screen densities; true by default.
            enableSplit true
        }
        abi {
            // Different APKs are generated for devices with different CPU architectures; true by default.
            enableSplit true
        }
        language {
            enableSplit false
        }
    }

    buildFeatures {
        //Data binding
        dataBinding = true
    }

    androidExtensions {
        experimental = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    // AndroidX constraintlayout dependency
    def constraintlayout_version = "1.1.3"
    implementation "androidx.constraintlayout:constraintlayout:$constraintlayout_version"

    // AndroidX appcompat dependency
    def appcompat_version = "1.1.0"
    implementation "androidx.appcompat:appcompat:$appcompat_version"

    // AndroidX material design
    def material_version = "1.1.0"
    implementation "com.google.android.material:material:$material_version"

    //Hilt core dependencies Injection
    def daggerHiltAndroidVersion = "2.28-alpha"
    implementation "com.google.dagger:hilt-android:$daggerHiltAndroidVersion"
    kapt "com.google.dagger:hilt-android-compiler:$daggerHiltAndroidVersion"

    def daggerHiltVersion = "1.0.0-alpha01"
    implementation "androidx.hilt:hilt-lifecycle-viewmodel:$daggerHiltVersion"
    kapt "androidx.hilt:hilt-compiler:$daggerHiltVersion"

    //Android lifecycle dependency Injection
    def lifecycle_version = '2.2.0'
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    implementation 'androidx.activity:activity-ktx:1.1.0'

    //Fresco dependency
    def fresco_version = '2.0.0'
    implementation "com.facebook.fresco:fresco:$fresco_version"

    //Co-routines dependency Injection
    def coroutines_android_version = '1.3.0'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_android_version"

    def coroutines_adapter_version = "0.9.2"
    implementation "com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:$coroutines_adapter_version"

    //Retrofit dependency Injection
    def retrofitVersion = "2.5.0"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"

    // Paging dependency Injection
    def paging_version = "3.0.0-alpha01"
    implementation "androidx.paging:paging-runtime:$paging_version"

    // Junit dependency Injection
    def junit_version = "4.13"
    testImplementation "junit:junit:$junit_version"

    // MOCKITO dependency Injection
    def mockito_version = "3.3.3"
    testImplementation "org.mockito:mockito-core:$mockito_version"
}
